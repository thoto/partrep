#!/bin/sh -e

set -e
set -x

logger "starting partman replacement..."
# modprobe lvm

swapoff -a

DISK_A=$(readlink -f $(debconf-get partrep/disk-a))
DISK_B=$(readlink -f $(debconf-get partrep/disk-b))

# calculate RAM size for swap partition
MEM_SZ_RAW=$(cat /proc/meminfo | grep MemTotal)
echo $MEM_SZ_RAW | grep kB || { logger "mem not in kb" ; exit 1 ; }
MEM_SZ_kB=$(echo $MEM_SZ_RAW |cut -d ':' -f 2|sed 's/^ *//g'|cut -d ' ' -f 1)
MEM_SZ_MB=$(expr ${MEM_SZ_kB} / 1024)

DEF_SZ_ESP_MB=$(debconf-get partrep/sz-esp-mb)
DEF_SZ_BOOT_MB=$(debconf-get partrep/sz-boot-mb)
DEF_SZ_SYS_MB=$(debconf-get partrep/sz-sys-mb)
DEF_SZ_SLOG_MB=$(debconf-get partrep/sz-slog-mb)
DEF_SZ_SWAP_MB=$(expr ${MEM_SZ_MB} \* $(debconf-get partrep/swap-factor))
DEF_SZ_LVM_MB=$(expr ${DEF_SZ_SYS_MB} + ${DEF_SZ_SWAP_MB})

VGNAME="$(debconf-get partrep/vgname | tr -d ' ')"

modprobe efivars
[ -d /proc/efi -o -d /sys/firmware/efi ] && EFI_MODE=true || EFI_MODE=false

${EFI_MODE} && logger "running in EFI mode"

logger "determining if we need repartitioning"
disk_sz_MB () {
	expr $( [ -b "${1}" ] && blockdev --getsize64 "${1}" || echo 0 ) \
		 / 1024 / 1024
}

if ${EFI_MODE} ; then
	PART_NUM_EFI=1
	PART_NUM_BOOT=2
	PART_NUM_LVM=3

	check_repart () {
		[ $(disk_sz_MB "${1}${PART_NUM_EFI}") -lt ${DEF_SZ_ESP_MB} ] \
			&& return 1
		[ $(disk_sz_MB "${1}${PART_NUM_BOOT}") -lt ${DEF_SZ_BOOT_MB} ] \
			&& return 1
		[ $(disk_sz_MB "${1}${PART_NUM_LVM}") -lt ${DEF_SZ_LVM_MB} ] \
			&& return 1
		[ $(disk_sz_MB "${1}4") -lt ${DEF_SZ_SLOG_MB} ] && return 1
		[ ! -b "${1}5" ] && return 1
		return 0
	}

	conditionally_partition () {
		local PART_ID_1="00000000-0000-0000-0000-000000000000"
		local PART_ID_2="00000000-0000-0000-0000-000000000000"
		if ! check_repart ${1} ; then
			# bootable disk has valid boot and esp partions
			${2} && PART_ID_1="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
			${2} && PART_ID_2="8DA63339-0007-60C0-C436-083AC8230908"
			logger "repartitioning ${1} (uefi mode)"
			sfdisk --delete ${1} || true
			sfdisk ${1} << EOF
label: gpt
size=${DEF_SZ_ESP_MB}M, type=${PART_ID_1}, name="EFI system partition"
size=${DEF_SZ_BOOT_MB}M, type=${PART_ID_2}
size=${DEF_SZ_LVM_MB}M, type=E6D6D379-F507-44C2-A23C-238F2A3DF928
size=${DEF_SZ_SLOG_MB}M, type=6A898CC3-1DD2-11B2-99A6-080020736631
type=6A898CC3-1DD2-11B2-99A6-080020736631
EOF
		# there is no 21686148-6449-6E6F-744E-656564454649 since no bios boot
		fi
	}

else
	PART_NUM_BOOT=1
	PART_NUM_LVM=2

	check_repart () {
		[ $(disk_sz_MB "${1}${PART_NUM_BOOT}") -lt ${DEF_SZ_BOOT_MB} ] \
			&& return 1
		[ $(disk_sz_MB "${1}${PART_NUM_LVM}") -lt ${DEF_SZ_LVM_MB} ] \
			&& return 1
		[ $(disk_sz_MB "${1}3") -lt ${DEF_SZ_SLOG_MB} ] && return 1
		[ ! -b "${1}4" ] && return 1
		return 0
	}

	conditionally_partition () {
		local bootable=""
		if ! check_repart ${1} ; then
			${2} && bootable=",*"
			logger "repartitioning ${1} (mbr mode)"
			sfdisk --delete ${1} || true
			sfdisk ${1} << EOF
label: dos
,${DEF_SZ_BOOT_MB}M,83${bootable}
,${DEF_SZ_LVM_MB}M,8e
,${DEF_SZ_SLOG_MB}M,bf
,+,bf
EOF
		fi
	}

fi

conditionally_partition ${DISK_A} true
conditionally_partition ${DISK_B} false

logger "create filesystems"
# remove volume group if already present
vgscan
vgdisplay "${VGNAME}" && vgremove -f "${VGNAME}"

mkfs.ext2 -F -F -L "boot" "${DISK_A}${PART_NUM_BOOT}"
dd if=/dev/zero of="${DISK_B}${PART_NUM_BOOT}" bs=4k count=1

dd if=/dev/zero of="${DISK_A}${PART_NUM_LVM}" bs=4k count=1
dd if=/dev/zero of="${DISK_B}${PART_NUM_LVM}" bs=4k count=1
pvcreate -ffy "${DISK_A}${PART_NUM_LVM}"
pvcreate -ffy "${DISK_B}${PART_NUM_LVM}"
vgcreate "${VGNAME}" "${DISK_A}${PART_NUM_LVM}" "${DISK_B}${PART_NUM_LVM}"

lvcreate -y -Wy -L "${DEF_SZ_SYS_MB}M" --mirrors 1 -n root "${VGNAME}"
lvcreate -y -Wy -L "${DEF_SZ_SWAP_MB}M" --stripes 2 -n swap "${VGNAME}"

mkfs.xfs -f -L "root" "/dev/${VGNAME}/root"
mkswap -L "swap" "/dev/${VGNAME}/swap"

EFI_FSTAB=""
if ${EFI_MODE}; then
	mkfs.fat -n SYSTEM "${DISK_A}${PART_NUM_EFI}"
	EFI_UUID=$(blkid -s UUID -o value "${DISK_A}${PART_NUM_EFI}")
	EFI_FSTAB="UUID=${EFI_UUID}	/boot/efi	vfat	umask=0077	0	1"
	efi_mount () {
		mkdir /target/boot/efi
		mount -t vfat "${DISK_A}${PART_NUM_EFI}" /target/boot/efi
	}
else
	efi_mount () {
		echo "nop"
	}
fi


logger "mount volumes prepare fstab"

BOOT_UUID=$(blkid -s UUID -o value "${DISK_A}${PART_NUM_BOOT}")
ROOT_UUID=$(blkid -s UUID -o value "/dev/${VGNAME}/root")

[ -d /target ] || mkdir /target
# notice: if we had a method to rescan partition UUIDs we would use that here
mount -t xfs "/dev/${VGNAME}/root" /target
mkdir /target/boot
mount -t ext2 "${DISK_A}${PART_NUM_BOOT}" /target/boot
efi_mount

mkdir /target/etc
echo "UUID=${ROOT_UUID}	/	xfs	defaults,noatime	1	1" >> /target/etc/fstab
echo "UUID=${BOOT_UUID}	/boot	ext2	defaults,noatime	1	2" >> /target/etc/fstab
echo ${EFI_FSTAB} >> /target/etc/fstab
echo "/dev/${VGNAME}/swap	none	swap	sw	0	0" >> /target/etc/fstab
# /proc and /sys are getting mounted automatically today

swapon "/dev/${VGNAME}/swap"

apt-install xfsprogs || true
apt-install e2fsprogs || true
apt-install lvm2 || true
# for raid modules to be present in initrd
apt-install dmraid || true
apt-install mdadm || true
apt-install efivar || true
apt-install efibootmgr || true

exit 0
